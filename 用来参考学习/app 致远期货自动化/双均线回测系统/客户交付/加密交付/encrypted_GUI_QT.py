#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
加密的Python文件 - GUI_QT.py
"""

import base64
import zlib
import sys
import types

def decrypt_and_run():
    """解密并执行代码"""
    # 加密的源代码
    encoded_source = """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"""
    
    try:
        # 解码和解压缩
        compressed = base64.b64decode(encoded_source.encode('ascii'))
        source_code = zlib.decompress(compressed).decode('utf-8')
        
        # 创建模块并执行
        module = types.ModuleType("__main__")
        exec(source_code, module.__dict__)
        
    except Exception as e:
        print(f"执行错误: {e}")
        sys.exit(1)

if __name__ == "__main__":
    decrypt_and_run()
