#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
加密的Python文件 - interactive_backtest.py
"""

import base64
import zlib
import sys
import types

def decrypt_and_run():
    """解密并执行代码"""
    # 加密的源代码
    encoded_source = """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"""
    
    try:
        # 解码和解压缩
        compressed = base64.b64decode(encoded_source.encode('ascii'))
        source_code = zlib.decompress(compressed).decode('utf-8')
        
        # 创建模块并执行
        module = types.ModuleType("__main__")
        exec(source_code, module.__dict__)
        
    except Exception as e:
        print(f"执行错误: {e}")
        sys.exit(1)

if __name__ == "__main__":
    decrypt_and_run()
